//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace AerodromeManager.AmdbService {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="User", Namespace="http://schemas.datacontract.org/2004/07/AerodromeServices.DataContract")]
    [System.SerializableAttribute()]
    public partial class User : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool DisabledField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string EmailField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string FirstNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private long IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsAdminField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string LastNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PasswordField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PositionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private AerodromeManager.AmdbService.UserPrivilege PrivilegeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string UserNameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool Disabled {
            get {
                return this.DisabledField;
            }
            set {
                if ((this.DisabledField.Equals(value) != true)) {
                    this.DisabledField = value;
                    this.RaisePropertyChanged("Disabled");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Email {
            get {
                return this.EmailField;
            }
            set {
                if ((object.ReferenceEquals(this.EmailField, value) != true)) {
                    this.EmailField = value;
                    this.RaisePropertyChanged("Email");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string FirstName {
            get {
                return this.FirstNameField;
            }
            set {
                if ((object.ReferenceEquals(this.FirstNameField, value) != true)) {
                    this.FirstNameField = value;
                    this.RaisePropertyChanged("FirstName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public long Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsAdmin {
            get {
                return this.IsAdminField;
            }
            set {
                if ((this.IsAdminField.Equals(value) != true)) {
                    this.IsAdminField = value;
                    this.RaisePropertyChanged("IsAdmin");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string LastName {
            get {
                return this.LastNameField;
            }
            set {
                if ((object.ReferenceEquals(this.LastNameField, value) != true)) {
                    this.LastNameField = value;
                    this.RaisePropertyChanged("LastName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Password {
            get {
                return this.PasswordField;
            }
            set {
                if ((object.ReferenceEquals(this.PasswordField, value) != true)) {
                    this.PasswordField = value;
                    this.RaisePropertyChanged("Password");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Position {
            get {
                return this.PositionField;
            }
            set {
                if ((object.ReferenceEquals(this.PositionField, value) != true)) {
                    this.PositionField = value;
                    this.RaisePropertyChanged("Position");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public AerodromeManager.AmdbService.UserPrivilege Privilege {
            get {
                return this.PrivilegeField;
            }
            set {
                if ((this.PrivilegeField.Equals(value) != true)) {
                    this.PrivilegeField = value;
                    this.RaisePropertyChanged("Privilege");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string UserName {
            get {
                return this.UserNameField;
            }
            set {
                if ((object.ReferenceEquals(this.UserNameField, value) != true)) {
                    this.UserNameField = value;
                    this.RaisePropertyChanged("UserName");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="UserPrivilege", Namespace="http://schemas.datacontract.org/2004/07/AerodromeServices")]
    public enum UserPrivilege : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        ReadOnly = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Full = 1,
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="AmdbMetadata", Namespace="http://schemas.datacontract.org/2004/07/AerodromeServices.DataContract")]
    [System.SerializableAttribute()]
    public partial class AmdbMetadata : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string AirportField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime CreatedAtField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private AerodromeManager.AmdbService.User CreatedByField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private long IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Guid IdentifierField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsLockedField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private AerodromeManager.AmdbService.User LockedByField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string OrganizationField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string VersionField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Airport {
            get {
                return this.AirportField;
            }
            set {
                if ((object.ReferenceEquals(this.AirportField, value) != true)) {
                    this.AirportField = value;
                    this.RaisePropertyChanged("Airport");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime CreatedAt {
            get {
                return this.CreatedAtField;
            }
            set {
                if ((this.CreatedAtField.Equals(value) != true)) {
                    this.CreatedAtField = value;
                    this.RaisePropertyChanged("CreatedAt");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public AerodromeManager.AmdbService.User CreatedBy {
            get {
                return this.CreatedByField;
            }
            set {
                if ((object.ReferenceEquals(this.CreatedByField, value) != true)) {
                    this.CreatedByField = value;
                    this.RaisePropertyChanged("CreatedBy");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public long Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid Identifier {
            get {
                return this.IdentifierField;
            }
            set {
                if ((this.IdentifierField.Equals(value) != true)) {
                    this.IdentifierField = value;
                    this.RaisePropertyChanged("Identifier");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsLocked {
            get {
                return this.IsLockedField;
            }
            set {
                if ((this.IsLockedField.Equals(value) != true)) {
                    this.IsLockedField = value;
                    this.RaisePropertyChanged("IsLocked");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public AerodromeManager.AmdbService.User LockedBy {
            get {
                return this.LockedByField;
            }
            set {
                if ((object.ReferenceEquals(this.LockedByField, value) != true)) {
                    this.LockedByField = value;
                    this.RaisePropertyChanged("LockedBy");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Organization {
            get {
                return this.OrganizationField;
            }
            set {
                if ((object.ReferenceEquals(this.OrganizationField, value) != true)) {
                    this.OrganizationField = value;
                    this.RaisePropertyChanged("Organization");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Version {
            get {
                return this.VersionField;
            }
            set {
                if ((object.ReferenceEquals(this.VersionField, value) != true)) {
                    this.VersionField = value;
                    this.RaisePropertyChanged("Version");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="AmdbCallBackType", Namespace="http://schemas.datacontract.org/2004/07/AerodromeServices")]
    public enum AmdbCallBackType : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Created = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Deleted = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Locked = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Unlocked = 3,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="UserCallbackType", Namespace="http://schemas.datacontract.org/2004/07/AerodromeServices")]
    public enum UserCallbackType : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        ChangedPassword = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Deleted = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        PrivilegeUp = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        PrivilegeDown = 3,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Disabled = 4,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Enabled = 5,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Updated = 6,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="AmdbService.IAmdbManagerService", CallbackContract=typeof(AerodromeManager.AmdbService.IAmdbManagerServiceCallback), SessionMode=System.ServiceModel.SessionMode.Required)]
    public interface IAmdbManagerService {
        
        [System.ServiceModel.OperationContractAttribute(ProtectionLevel=System.Net.Security.ProtectionLevel.EncryptAndSign, Action="http://tempuri.org/IAmdbManagerService/Login", ReplyAction="http://tempuri.org/IAmdbManagerService/LoginResponse")]
        void Login();
        
        [System.ServiceModel.OperationContractAttribute(ProtectionLevel=System.Net.Security.ProtectionLevel.EncryptAndSign, Action="http://tempuri.org/IAmdbManagerService/Login", ReplyAction="http://tempuri.org/IAmdbManagerService/LoginResponse")]
        System.Threading.Tasks.Task LoginAsync();
        
        [System.ServiceModel.OperationContractAttribute(ProtectionLevel=System.Net.Security.ProtectionLevel.EncryptAndSign, Action="http://tempuri.org/IAmdbManagerService/GetAllUser", ReplyAction="http://tempuri.org/IAmdbManagerService/GetAllUserResponse")]
        System.Collections.Generic.List<AerodromeManager.AmdbService.User> GetAllUser();
        
        [System.ServiceModel.OperationContractAttribute(ProtectionLevel=System.Net.Security.ProtectionLevel.EncryptAndSign, Action="http://tempuri.org/IAmdbManagerService/GetAllUser", ReplyAction="http://tempuri.org/IAmdbManagerService/GetAllUserResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<AerodromeManager.AmdbService.User>> GetAllUserAsync();
        
        [System.ServiceModel.OperationContractAttribute(ProtectionLevel=System.Net.Security.ProtectionLevel.EncryptAndSign, Action="http://tempuri.org/IAmdbManagerService/GetOrganizations", ReplyAction="http://tempuri.org/IAmdbManagerService/GetOrganizationsResponse")]
        System.Collections.Generic.List<string> GetOrganizations();
        
        [System.ServiceModel.OperationContractAttribute(ProtectionLevel=System.Net.Security.ProtectionLevel.EncryptAndSign, Action="http://tempuri.org/IAmdbManagerService/GetOrganizations", ReplyAction="http://tempuri.org/IAmdbManagerService/GetOrganizationsResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<string>> GetOrganizationsAsync();
        
        [System.ServiceModel.OperationContractAttribute(ProtectionLevel=System.Net.Security.ProtectionLevel.EncryptAndSign, Action="http://tempuri.org/IAmdbManagerService/GetAerodromes", ReplyAction="http://tempuri.org/IAmdbManagerService/GetAerodromesResponse")]
        System.Collections.Generic.List<string> GetAerodromes(string organization);
        
        [System.ServiceModel.OperationContractAttribute(ProtectionLevel=System.Net.Security.ProtectionLevel.EncryptAndSign, Action="http://tempuri.org/IAmdbManagerService/GetAerodromes", ReplyAction="http://tempuri.org/IAmdbManagerService/GetAerodromesResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<string>> GetAerodromesAsync(string organization);
        
        [System.ServiceModel.OperationContractAttribute(ProtectionLevel=System.Net.Security.ProtectionLevel.EncryptAndSign, Action="http://tempuri.org/IAmdbManagerService/GetUser", ReplyAction="http://tempuri.org/IAmdbManagerService/GetUserResponse")]
        AerodromeManager.AmdbService.User GetUser(long id);
        
        [System.ServiceModel.OperationContractAttribute(ProtectionLevel=System.Net.Security.ProtectionLevel.EncryptAndSign, Action="http://tempuri.org/IAmdbManagerService/GetUser", ReplyAction="http://tempuri.org/IAmdbManagerService/GetUserResponse")]
        System.Threading.Tasks.Task<AerodromeManager.AmdbService.User> GetUserAsync(long id);
        
        [System.ServiceModel.OperationContractAttribute(ProtectionLevel=System.Net.Security.ProtectionLevel.EncryptAndSign, Action="http://tempuri.org/IAmdbManagerService/GetCurrentUser", ReplyAction="http://tempuri.org/IAmdbManagerService/GetCurrentUserResponse")]
        AerodromeManager.AmdbService.User GetCurrentUser();
        
        [System.ServiceModel.OperationContractAttribute(ProtectionLevel=System.Net.Security.ProtectionLevel.EncryptAndSign, Action="http://tempuri.org/IAmdbManagerService/GetCurrentUser", ReplyAction="http://tempuri.org/IAmdbManagerService/GetCurrentUserResponse")]
        System.Threading.Tasks.Task<AerodromeManager.AmdbService.User> GetCurrentUserAsync();
        
        [System.ServiceModel.OperationContractAttribute(ProtectionLevel=System.Net.Security.ProtectionLevel.EncryptAndSign, Action="http://tempuri.org/IAmdbManagerService/DeleteUser", ReplyAction="http://tempuri.org/IAmdbManagerService/DeleteUserResponse")]
        void DeleteUser(long id);
        
        [System.ServiceModel.OperationContractAttribute(ProtectionLevel=System.Net.Security.ProtectionLevel.EncryptAndSign, Action="http://tempuri.org/IAmdbManagerService/DeleteUser", ReplyAction="http://tempuri.org/IAmdbManagerService/DeleteUserResponse")]
        System.Threading.Tasks.Task DeleteUserAsync(long id);
        
        [System.ServiceModel.OperationContractAttribute(ProtectionLevel=System.Net.Security.ProtectionLevel.EncryptAndSign, Action="http://tempuri.org/IAmdbManagerService/CreateUser", ReplyAction="http://tempuri.org/IAmdbManagerService/CreateUserResponse")]
        void CreateUser(AerodromeManager.AmdbService.User user);
        
        [System.ServiceModel.OperationContractAttribute(ProtectionLevel=System.Net.Security.ProtectionLevel.EncryptAndSign, Action="http://tempuri.org/IAmdbManagerService/CreateUser", ReplyAction="http://tempuri.org/IAmdbManagerService/CreateUserResponse")]
        System.Threading.Tasks.Task CreateUserAsync(AerodromeManager.AmdbService.User user);
        
        [System.ServiceModel.OperationContractAttribute(ProtectionLevel=System.Net.Security.ProtectionLevel.EncryptAndSign, Action="http://tempuri.org/IAmdbManagerService/ExistsUser", ReplyAction="http://tempuri.org/IAmdbManagerService/ExistsUserResponse")]
        bool ExistsUser(string username, string password);
        
        [System.ServiceModel.OperationContractAttribute(ProtectionLevel=System.Net.Security.ProtectionLevel.EncryptAndSign, Action="http://tempuri.org/IAmdbManagerService/ExistsUser", ReplyAction="http://tempuri.org/IAmdbManagerService/ExistsUserResponse")]
        System.Threading.Tasks.Task<bool> ExistsUserAsync(string username, string password);
        
        [System.ServiceModel.OperationContractAttribute(ProtectionLevel=System.Net.Security.ProtectionLevel.EncryptAndSign, Action="http://tempuri.org/IAmdbManagerService/UpdateUser", ReplyAction="http://tempuri.org/IAmdbManagerService/UpdateUserResponse")]
        void UpdateUser(AerodromeManager.AmdbService.User user);
        
        [System.ServiceModel.OperationContractAttribute(ProtectionLevel=System.Net.Security.ProtectionLevel.EncryptAndSign, Action="http://tempuri.org/IAmdbManagerService/UpdateUser", ReplyAction="http://tempuri.org/IAmdbManagerService/UpdateUserResponse")]
        System.Threading.Tasks.Task UpdateUserAsync(AerodromeManager.AmdbService.User user);
        
        [System.ServiceModel.OperationContractAttribute(ProtectionLevel=System.Net.Security.ProtectionLevel.EncryptAndSign, Action="http://tempuri.org/IAmdbManagerService/DisableUser", ReplyAction="http://tempuri.org/IAmdbManagerService/DisableUserResponse")]
        void DisableUser(long id, bool disabled);
        
        [System.ServiceModel.OperationContractAttribute(ProtectionLevel=System.Net.Security.ProtectionLevel.EncryptAndSign, Action="http://tempuri.org/IAmdbManagerService/DisableUser", ReplyAction="http://tempuri.org/IAmdbManagerService/DisableUserResponse")]
        System.Threading.Tasks.Task DisableUserAsync(long id, bool disabled);
        
        [System.ServiceModel.OperationContractAttribute(ProtectionLevel=System.Net.Security.ProtectionLevel.EncryptAndSign, Action="http://tempuri.org/IAmdbManagerService/ChangePassword", ReplyAction="http://tempuri.org/IAmdbManagerService/ChangePasswordResponse")]
        void ChangePassword(long id, string oldPassword, string newPassword);
        
        [System.ServiceModel.OperationContractAttribute(ProtectionLevel=System.Net.Security.ProtectionLevel.EncryptAndSign, Action="http://tempuri.org/IAmdbManagerService/ChangePassword", ReplyAction="http://tempuri.org/IAmdbManagerService/ChangePasswordResponse")]
        System.Threading.Tasks.Task ChangePasswordAsync(long id, string oldPassword, string newPassword);
        
        [System.ServiceModel.OperationContractAttribute(ProtectionLevel=System.Net.Security.ProtectionLevel.EncryptAndSign, Action="http://tempuri.org/IAmdbManagerService/GetConfigFile", ReplyAction="http://tempuri.org/IAmdbManagerService/GetConfigFileResponse")]
        byte[] GetConfigFile(long id);
        
        [System.ServiceModel.OperationContractAttribute(ProtectionLevel=System.Net.Security.ProtectionLevel.EncryptAndSign, Action="http://tempuri.org/IAmdbManagerService/GetConfigFile", ReplyAction="http://tempuri.org/IAmdbManagerService/GetConfigFileResponse")]
        System.Threading.Tasks.Task<byte[]> GetConfigFileAsync(long id);
        
        [System.ServiceModel.OperationContractAttribute(ProtectionLevel=System.Net.Security.ProtectionLevel.EncryptAndSign, Action="http://tempuri.org/IAmdbManagerService/Upload", ReplyAction="http://tempuri.org/IAmdbManagerService/UploadResponse")]
        void Upload(AerodromeManager.AmdbService.AmdbMetadata chart, byte[] sourece);
        
        [System.ServiceModel.OperationContractAttribute(ProtectionLevel=System.Net.Security.ProtectionLevel.EncryptAndSign, Action="http://tempuri.org/IAmdbManagerService/Upload", ReplyAction="http://tempuri.org/IAmdbManagerService/UploadResponse")]
        System.Threading.Tasks.Task UploadAsync(AerodromeManager.AmdbService.AmdbMetadata chart, byte[] sourece);
        
        [System.ServiceModel.OperationContractAttribute(ProtectionLevel=System.Net.Security.ProtectionLevel.EncryptAndSign, Action="http://tempuri.org/IAmdbManagerService/GetLatestAmdbVersion", ReplyAction="http://tempuri.org/IAmdbManagerService/GetLatestAmdbVersionResponse")]
        AerodromeManager.AmdbService.AmdbMetadata GetLatestAmdbVersion(System.Guid identifier);
        
        [System.ServiceModel.OperationContractAttribute(ProtectionLevel=System.Net.Security.ProtectionLevel.EncryptAndSign, Action="http://tempuri.org/IAmdbManagerService/GetLatestAmdbVersion", ReplyAction="http://tempuri.org/IAmdbManagerService/GetLatestAmdbVersionResponse")]
        System.Threading.Tasks.Task<AerodromeManager.AmdbService.AmdbMetadata> GetLatestAmdbVersionAsync(System.Guid identifier);
        
        [System.ServiceModel.OperationContractAttribute(ProtectionLevel=System.Net.Security.ProtectionLevel.EncryptAndSign, Action="http://tempuri.org/IAmdbManagerService/GetPreviewOf", ReplyAction="http://tempuri.org/IAmdbManagerService/GetPreviewOfResponse")]
        byte[] GetPreviewOf(long id);
        
        [System.ServiceModel.OperationContractAttribute(ProtectionLevel=System.Net.Security.ProtectionLevel.EncryptAndSign, Action="http://tempuri.org/IAmdbManagerService/GetPreviewOf", ReplyAction="http://tempuri.org/IAmdbManagerService/GetPreviewOfResponse")]
        System.Threading.Tasks.Task<byte[]> GetPreviewOfAsync(long id);
        
        [System.ServiceModel.OperationContractAttribute(ProtectionLevel=System.Net.Security.ProtectionLevel.EncryptAndSign, Action="http://tempuri.org/IAmdbManagerService/GetSourceOf", ReplyAction="http://tempuri.org/IAmdbManagerService/GetSourceOfResponse")]
        byte[] GetSourceOf(long id, bool locked);
        
        [System.ServiceModel.OperationContractAttribute(ProtectionLevel=System.Net.Security.ProtectionLevel.EncryptAndSign, Action="http://tempuri.org/IAmdbManagerService/GetSourceOf", ReplyAction="http://tempuri.org/IAmdbManagerService/GetSourceOfResponse")]
        System.Threading.Tasks.Task<byte[]> GetSourceOfAsync(long id, bool locked);
        
        [System.ServiceModel.OperationContractAttribute(ProtectionLevel=System.Net.Security.ProtectionLevel.EncryptAndSign, Action="http://tempuri.org/IAmdbManagerService/GetAllAmdbFiles", ReplyAction="http://tempuri.org/IAmdbManagerService/GetAllAmdbFilesResponse")]
        System.Collections.Generic.List<AerodromeManager.AmdbService.AmdbMetadata> GetAllAmdbFiles(string name, System.Nullable<long> userId, string organization, string aerodrome, System.Nullable<bool> locked, System.Nullable<System.DateTime> createdBeginning, System.Nullable<System.DateTime> createdEnding);
        
        [System.ServiceModel.OperationContractAttribute(ProtectionLevel=System.Net.Security.ProtectionLevel.EncryptAndSign, Action="http://tempuri.org/IAmdbManagerService/GetAllAmdbFiles", ReplyAction="http://tempuri.org/IAmdbManagerService/GetAllAmdbFilesResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<AerodromeManager.AmdbService.AmdbMetadata>> GetAllAmdbFilesAsync(string name, System.Nullable<long> userId, string organization, string aerodrome, System.Nullable<bool> locked, System.Nullable<System.DateTime> createdBeginning, System.Nullable<System.DateTime> createdEnding);
        
        [System.ServiceModel.OperationContractAttribute(ProtectionLevel=System.Net.Security.ProtectionLevel.EncryptAndSign, Action="http://tempuri.org/IAmdbManagerService/GetHistoryOf", ReplyAction="http://tempuri.org/IAmdbManagerService/GetHistoryOfResponse")]
        System.Collections.Generic.List<AerodromeManager.AmdbService.AmdbMetadata> GetHistoryOf(System.Guid identifier);
        
        [System.ServiceModel.OperationContractAttribute(ProtectionLevel=System.Net.Security.ProtectionLevel.EncryptAndSign, Action="http://tempuri.org/IAmdbManagerService/GetHistoryOf", ReplyAction="http://tempuri.org/IAmdbManagerService/GetHistoryOfResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<AerodromeManager.AmdbService.AmdbMetadata>> GetHistoryOfAsync(System.Guid identifier);
        
        [System.ServiceModel.OperationContractAttribute(ProtectionLevel=System.Net.Security.ProtectionLevel.EncryptAndSign, Action="http://tempuri.org/IAmdbManagerService/GetAmdb", ReplyAction="http://tempuri.org/IAmdbManagerService/GetAmdbResponse")]
        AerodromeManager.AmdbService.AmdbMetadata GetAmdb(System.Guid identifier, string version);
        
        [System.ServiceModel.OperationContractAttribute(ProtectionLevel=System.Net.Security.ProtectionLevel.EncryptAndSign, Action="http://tempuri.org/IAmdbManagerService/GetAmdb", ReplyAction="http://tempuri.org/IAmdbManagerService/GetAmdbResponse")]
        System.Threading.Tasks.Task<AerodromeManager.AmdbService.AmdbMetadata> GetAmdbAsync(System.Guid identifier, string version);
        
        [System.ServiceModel.OperationContractAttribute(ProtectionLevel=System.Net.Security.ProtectionLevel.EncryptAndSign, Action="http://tempuri.org/IAmdbManagerService/GetAmdbById", ReplyAction="http://tempuri.org/IAmdbManagerService/GetAmdbByIdResponse")]
        AerodromeManager.AmdbService.AmdbMetadata GetAmdbById(long id);
        
        [System.ServiceModel.OperationContractAttribute(ProtectionLevel=System.Net.Security.ProtectionLevel.EncryptAndSign, Action="http://tempuri.org/IAmdbManagerService/GetAmdbById", ReplyAction="http://tempuri.org/IAmdbManagerService/GetAmdbByIdResponse")]
        System.Threading.Tasks.Task<AerodromeManager.AmdbService.AmdbMetadata> GetAmdbByIdAsync(long id);
        
        [System.ServiceModel.OperationContractAttribute(ProtectionLevel=System.Net.Security.ProtectionLevel.EncryptAndSign, Action="http://tempuri.org/IAmdbManagerService/LockAmdb", ReplyAction="http://tempuri.org/IAmdbManagerService/LockAmdbResponse")]
        void LockAmdb(long id, bool locked);
        
        [System.ServiceModel.OperationContractAttribute(ProtectionLevel=System.Net.Security.ProtectionLevel.EncryptAndSign, Action="http://tempuri.org/IAmdbManagerService/LockAmdb", ReplyAction="http://tempuri.org/IAmdbManagerService/LockAmdbResponse")]
        System.Threading.Tasks.Task LockAmdbAsync(long id, bool locked);
        
        [System.ServiceModel.OperationContractAttribute(ProtectionLevel=System.Net.Security.ProtectionLevel.EncryptAndSign, Action="http://tempuri.org/IAmdbManagerService/DeleteAllAmdbVersions", ReplyAction="http://tempuri.org/IAmdbManagerService/DeleteAllAmdbVersionsResponse")]
        void DeleteAllAmdbVersions(System.Guid identifier);
        
        [System.ServiceModel.OperationContractAttribute(ProtectionLevel=System.Net.Security.ProtectionLevel.EncryptAndSign, Action="http://tempuri.org/IAmdbManagerService/DeleteAllAmdbVersions", ReplyAction="http://tempuri.org/IAmdbManagerService/DeleteAllAmdbVersionsResponse")]
        System.Threading.Tasks.Task DeleteAllAmdbVersionsAsync(System.Guid identifier);
        
        [System.ServiceModel.OperationContractAttribute(ProtectionLevel=System.Net.Security.ProtectionLevel.EncryptAndSign, Action="http://tempuri.org/IAmdbManagerService/DeleteAmdbById", ReplyAction="http://tempuri.org/IAmdbManagerService/DeleteAmdbByIdResponse")]
        void DeleteAmdbById(long id);
        
        [System.ServiceModel.OperationContractAttribute(ProtectionLevel=System.Net.Security.ProtectionLevel.EncryptAndSign, Action="http://tempuri.org/IAmdbManagerService/DeleteAmdbById", ReplyAction="http://tempuri.org/IAmdbManagerService/DeleteAmdbByIdResponse")]
        System.Threading.Tasks.Task DeleteAmdbByIdAsync(long id);
        
        [System.ServiceModel.OperationContractAttribute(ProtectionLevel=System.Net.Security.ProtectionLevel.EncryptAndSign, Action="http://tempuri.org/IAmdbManagerService/DeleteAmdbByVersion", ReplyAction="http://tempuri.org/IAmdbManagerService/DeleteAmdbByVersionResponse")]
        void DeleteAmdbByVersion(System.Guid id, string version);
        
        [System.ServiceModel.OperationContractAttribute(ProtectionLevel=System.Net.Security.ProtectionLevel.EncryptAndSign, Action="http://tempuri.org/IAmdbManagerService/DeleteAmdbByVersion", ReplyAction="http://tempuri.org/IAmdbManagerService/DeleteAmdbByVersionResponse")]
        System.Threading.Tasks.Task DeleteAmdbByVersionAsync(System.Guid id, string version);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IAmdbManagerServiceCallback {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, ProtectionLevel=System.Net.Security.ProtectionLevel.EncryptAndSign, Action="http://tempuri.org/IAmdbManagerService/AmdbChanged")]
        void AmdbChanged(AerodromeManager.AmdbService.AmdbMetadata chart, AerodromeManager.AmdbService.AmdbCallBackType type);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, ProtectionLevel=System.Net.Security.ProtectionLevel.EncryptAndSign, Action="http://tempuri.org/IAmdbManagerService/AllChartVersionsDeleted")]
        void AllChartVersionsDeleted(System.Guid identifier);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, ProtectionLevel=System.Net.Security.ProtectionLevel.EncryptAndSign, Action="http://tempuri.org/IAmdbManagerService/ChartsByEffectiveDateDeleted")]
        void ChartsByEffectiveDateDeleted(System.Guid identifier, string version);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, ProtectionLevel=System.Net.Security.ProtectionLevel.EncryptAndSign, Action="http://tempuri.org/IAmdbManagerService/UserChanged")]
        void UserChanged(AerodromeManager.AmdbService.UserCallbackType type);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IAmdbManagerServiceChannel : AerodromeManager.AmdbService.IAmdbManagerService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class AmdbManagerServiceClient : System.ServiceModel.DuplexClientBase<AerodromeManager.AmdbService.IAmdbManagerService>, AerodromeManager.AmdbService.IAmdbManagerService {
        
        public AmdbManagerServiceClient(System.ServiceModel.InstanceContext callbackInstance) : 
                base(callbackInstance) {
        }
        
        public AmdbManagerServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName) : 
                base(callbackInstance, endpointConfigurationName) {
        }
        
        public AmdbManagerServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, string remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public AmdbManagerServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public AmdbManagerServiceClient(System.ServiceModel.InstanceContext callbackInstance, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, binding, remoteAddress) {
        }
        
        public void Login() {
            base.Channel.Login();
        }
        
        public System.Threading.Tasks.Task LoginAsync() {
            return base.Channel.LoginAsync();
        }
        
        public System.Collections.Generic.List<AerodromeManager.AmdbService.User> GetAllUser() {
            return base.Channel.GetAllUser();
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<AerodromeManager.AmdbService.User>> GetAllUserAsync() {
            return base.Channel.GetAllUserAsync();
        }
        
        public System.Collections.Generic.List<string> GetOrganizations() {
            return base.Channel.GetOrganizations();
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<string>> GetOrganizationsAsync() {
            return base.Channel.GetOrganizationsAsync();
        }
        
        public System.Collections.Generic.List<string> GetAerodromes(string organization) {
            return base.Channel.GetAerodromes(organization);
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<string>> GetAerodromesAsync(string organization) {
            return base.Channel.GetAerodromesAsync(organization);
        }
        
        public AerodromeManager.AmdbService.User GetUser(long id) {
            return base.Channel.GetUser(id);
        }
        
        public System.Threading.Tasks.Task<AerodromeManager.AmdbService.User> GetUserAsync(long id) {
            return base.Channel.GetUserAsync(id);
        }
        
        public AerodromeManager.AmdbService.User GetCurrentUser() {
            return base.Channel.GetCurrentUser();
        }
        
        public System.Threading.Tasks.Task<AerodromeManager.AmdbService.User> GetCurrentUserAsync() {
            return base.Channel.GetCurrentUserAsync();
        }
        
        public void DeleteUser(long id) {
            base.Channel.DeleteUser(id);
        }
        
        public System.Threading.Tasks.Task DeleteUserAsync(long id) {
            return base.Channel.DeleteUserAsync(id);
        }
        
        public void CreateUser(AerodromeManager.AmdbService.User user) {
            base.Channel.CreateUser(user);
        }
        
        public System.Threading.Tasks.Task CreateUserAsync(AerodromeManager.AmdbService.User user) {
            return base.Channel.CreateUserAsync(user);
        }
        
        public bool ExistsUser(string username, string password) {
            return base.Channel.ExistsUser(username, password);
        }
        
        public System.Threading.Tasks.Task<bool> ExistsUserAsync(string username, string password) {
            return base.Channel.ExistsUserAsync(username, password);
        }
        
        public void UpdateUser(AerodromeManager.AmdbService.User user) {
            base.Channel.UpdateUser(user);
        }
        
        public System.Threading.Tasks.Task UpdateUserAsync(AerodromeManager.AmdbService.User user) {
            return base.Channel.UpdateUserAsync(user);
        }
        
        public void DisableUser(long id, bool disabled) {
            base.Channel.DisableUser(id, disabled);
        }
        
        public System.Threading.Tasks.Task DisableUserAsync(long id, bool disabled) {
            return base.Channel.DisableUserAsync(id, disabled);
        }
        
        public void ChangePassword(long id, string oldPassword, string newPassword) {
            base.Channel.ChangePassword(id, oldPassword, newPassword);
        }
        
        public System.Threading.Tasks.Task ChangePasswordAsync(long id, string oldPassword, string newPassword) {
            return base.Channel.ChangePasswordAsync(id, oldPassword, newPassword);
        }
        
        public byte[] GetConfigFile(long id) {
            return base.Channel.GetConfigFile(id);
        }
        
        public System.Threading.Tasks.Task<byte[]> GetConfigFileAsync(long id) {
            return base.Channel.GetConfigFileAsync(id);
        }
        
        public void Upload(AerodromeManager.AmdbService.AmdbMetadata chart, byte[] sourece) {
            base.Channel.Upload(chart, sourece);
        }
        
        public System.Threading.Tasks.Task UploadAsync(AerodromeManager.AmdbService.AmdbMetadata chart, byte[] sourece) {
            return base.Channel.UploadAsync(chart, sourece);
        }
        
        public AerodromeManager.AmdbService.AmdbMetadata GetLatestAmdbVersion(System.Guid identifier) {
            return base.Channel.GetLatestAmdbVersion(identifier);
        }
        
        public System.Threading.Tasks.Task<AerodromeManager.AmdbService.AmdbMetadata> GetLatestAmdbVersionAsync(System.Guid identifier) {
            return base.Channel.GetLatestAmdbVersionAsync(identifier);
        }
        
        public byte[] GetPreviewOf(long id) {
            return base.Channel.GetPreviewOf(id);
        }
        
        public System.Threading.Tasks.Task<byte[]> GetPreviewOfAsync(long id) {
            return base.Channel.GetPreviewOfAsync(id);
        }
        
        public byte[] GetSourceOf(long id, bool locked) {
            return base.Channel.GetSourceOf(id, locked);
        }
        
        public System.Threading.Tasks.Task<byte[]> GetSourceOfAsync(long id, bool locked) {
            return base.Channel.GetSourceOfAsync(id, locked);
        }
        
        public System.Collections.Generic.List<AerodromeManager.AmdbService.AmdbMetadata> GetAllAmdbFiles(string name, System.Nullable<long> userId, string organization, string aerodrome, System.Nullable<bool> locked, System.Nullable<System.DateTime> createdBeginning, System.Nullable<System.DateTime> createdEnding) {
            return base.Channel.GetAllAmdbFiles(name, userId, organization, aerodrome, locked, createdBeginning, createdEnding);
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<AerodromeManager.AmdbService.AmdbMetadata>> GetAllAmdbFilesAsync(string name, System.Nullable<long> userId, string organization, string aerodrome, System.Nullable<bool> locked, System.Nullable<System.DateTime> createdBeginning, System.Nullable<System.DateTime> createdEnding) {
            return base.Channel.GetAllAmdbFilesAsync(name, userId, organization, aerodrome, locked, createdBeginning, createdEnding);
        }
        
        public System.Collections.Generic.List<AerodromeManager.AmdbService.AmdbMetadata> GetHistoryOf(System.Guid identifier) {
            return base.Channel.GetHistoryOf(identifier);
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<AerodromeManager.AmdbService.AmdbMetadata>> GetHistoryOfAsync(System.Guid identifier) {
            return base.Channel.GetHistoryOfAsync(identifier);
        }
        
        public AerodromeManager.AmdbService.AmdbMetadata GetAmdb(System.Guid identifier, string version) {
            return base.Channel.GetAmdb(identifier, version);
        }
        
        public System.Threading.Tasks.Task<AerodromeManager.AmdbService.AmdbMetadata> GetAmdbAsync(System.Guid identifier, string version) {
            return base.Channel.GetAmdbAsync(identifier, version);
        }
        
        public AerodromeManager.AmdbService.AmdbMetadata GetAmdbById(long id) {
            return base.Channel.GetAmdbById(id);
        }
        
        public System.Threading.Tasks.Task<AerodromeManager.AmdbService.AmdbMetadata> GetAmdbByIdAsync(long id) {
            return base.Channel.GetAmdbByIdAsync(id);
        }
        
        public void LockAmdb(long id, bool locked) {
            base.Channel.LockAmdb(id, locked);
        }
        
        public System.Threading.Tasks.Task LockAmdbAsync(long id, bool locked) {
            return base.Channel.LockAmdbAsync(id, locked);
        }
        
        public void DeleteAllAmdbVersions(System.Guid identifier) {
            base.Channel.DeleteAllAmdbVersions(identifier);
        }
        
        public System.Threading.Tasks.Task DeleteAllAmdbVersionsAsync(System.Guid identifier) {
            return base.Channel.DeleteAllAmdbVersionsAsync(identifier);
        }
        
        public void DeleteAmdbById(long id) {
            base.Channel.DeleteAmdbById(id);
        }
        
        public System.Threading.Tasks.Task DeleteAmdbByIdAsync(long id) {
            return base.Channel.DeleteAmdbByIdAsync(id);
        }
        
        public void DeleteAmdbByVersion(System.Guid id, string version) {
            base.Channel.DeleteAmdbByVersion(id, version);
        }
        
        public System.Threading.Tasks.Task DeleteAmdbByVersionAsync(System.Guid id, string version) {
            return base.Channel.DeleteAmdbByVersionAsync(id, version);
        }
    }
}
