//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ChartManagerWeb.ChartServiceReference {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ChartUser", Namespace="http://schemas.datacontract.org/2004/07/ChartServices.DataContract")]
    [System.SerializableAttribute()]
    public partial class ChartUser : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool DisabledField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string EmailField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string FirstNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private long IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsAdminField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string LastNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PasswordField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PositionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private ChartManagerWeb.ChartServiceReference.UserPrivilege PrivilegeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string UserNameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool Disabled {
            get {
                return this.DisabledField;
            }
            set {
                if ((this.DisabledField.Equals(value) != true)) {
                    this.DisabledField = value;
                    this.RaisePropertyChanged("Disabled");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Email {
            get {
                return this.EmailField;
            }
            set {
                if ((object.ReferenceEquals(this.EmailField, value) != true)) {
                    this.EmailField = value;
                    this.RaisePropertyChanged("Email");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string FirstName {
            get {
                return this.FirstNameField;
            }
            set {
                if ((object.ReferenceEquals(this.FirstNameField, value) != true)) {
                    this.FirstNameField = value;
                    this.RaisePropertyChanged("FirstName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public long Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsAdmin {
            get {
                return this.IsAdminField;
            }
            set {
                if ((this.IsAdminField.Equals(value) != true)) {
                    this.IsAdminField = value;
                    this.RaisePropertyChanged("IsAdmin");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string LastName {
            get {
                return this.LastNameField;
            }
            set {
                if ((object.ReferenceEquals(this.LastNameField, value) != true)) {
                    this.LastNameField = value;
                    this.RaisePropertyChanged("LastName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Password {
            get {
                return this.PasswordField;
            }
            set {
                if ((object.ReferenceEquals(this.PasswordField, value) != true)) {
                    this.PasswordField = value;
                    this.RaisePropertyChanged("Password");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Position {
            get {
                return this.PositionField;
            }
            set {
                if ((object.ReferenceEquals(this.PositionField, value) != true)) {
                    this.PositionField = value;
                    this.RaisePropertyChanged("Position");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public ChartManagerWeb.ChartServiceReference.UserPrivilege Privilege {
            get {
                return this.PrivilegeField;
            }
            set {
                if ((this.PrivilegeField.Equals(value) != true)) {
                    this.PrivilegeField = value;
                    this.RaisePropertyChanged("Privilege");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string UserName {
            get {
                return this.UserNameField;
            }
            set {
                if ((object.ReferenceEquals(this.UserNameField, value) != true)) {
                    this.UserNameField = value;
                    this.RaisePropertyChanged("UserName");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="UserPrivilege", Namespace="http://schemas.datacontract.org/2004/07/ChartServices")]
    public enum UserPrivilege : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        ReadOnly = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Full = 1,
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Chart", Namespace="http://schemas.datacontract.org/2004/07/ChartServices.DataContract")]
    [System.SerializableAttribute()]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(ChartManagerWeb.ChartServiceReference.ChartWithReference))]
    public partial class Chart : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string AirportField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime BeginEffectiveDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime CreatedAtField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private ChartManagerWeb.ChartServiceReference.ChartUser CreatedByField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<System.DateTime> EndEffectiveDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool HasUpdateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private long IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Guid IdentifierField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsLockedField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private ChartManagerWeb.ChartServiceReference.ChartUser LockedByField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NoteField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string OrganizationField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime PublicationDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string RunwayDirectionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private ChartManagerWeb.ChartServiceReference.ChartType TypeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string VersionField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Airport {
            get {
                return this.AirportField;
            }
            set {
                if ((object.ReferenceEquals(this.AirportField, value) != true)) {
                    this.AirportField = value;
                    this.RaisePropertyChanged("Airport");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime BeginEffectiveDate {
            get {
                return this.BeginEffectiveDateField;
            }
            set {
                if ((this.BeginEffectiveDateField.Equals(value) != true)) {
                    this.BeginEffectiveDateField = value;
                    this.RaisePropertyChanged("BeginEffectiveDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime CreatedAt {
            get {
                return this.CreatedAtField;
            }
            set {
                if ((this.CreatedAtField.Equals(value) != true)) {
                    this.CreatedAtField = value;
                    this.RaisePropertyChanged("CreatedAt");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public ChartManagerWeb.ChartServiceReference.ChartUser CreatedBy {
            get {
                return this.CreatedByField;
            }
            set {
                if ((object.ReferenceEquals(this.CreatedByField, value) != true)) {
                    this.CreatedByField = value;
                    this.RaisePropertyChanged("CreatedBy");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<System.DateTime> EndEffectiveDate {
            get {
                return this.EndEffectiveDateField;
            }
            set {
                if ((this.EndEffectiveDateField.Equals(value) != true)) {
                    this.EndEffectiveDateField = value;
                    this.RaisePropertyChanged("EndEffectiveDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool HasUpdate {
            get {
                return this.HasUpdateField;
            }
            set {
                if ((this.HasUpdateField.Equals(value) != true)) {
                    this.HasUpdateField = value;
                    this.RaisePropertyChanged("HasUpdate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public long Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid Identifier {
            get {
                return this.IdentifierField;
            }
            set {
                if ((this.IdentifierField.Equals(value) != true)) {
                    this.IdentifierField = value;
                    this.RaisePropertyChanged("Identifier");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsLocked {
            get {
                return this.IsLockedField;
            }
            set {
                if ((this.IsLockedField.Equals(value) != true)) {
                    this.IsLockedField = value;
                    this.RaisePropertyChanged("IsLocked");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public ChartManagerWeb.ChartServiceReference.ChartUser LockedBy {
            get {
                return this.LockedByField;
            }
            set {
                if ((object.ReferenceEquals(this.LockedByField, value) != true)) {
                    this.LockedByField = value;
                    this.RaisePropertyChanged("LockedBy");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Note {
            get {
                return this.NoteField;
            }
            set {
                if ((object.ReferenceEquals(this.NoteField, value) != true)) {
                    this.NoteField = value;
                    this.RaisePropertyChanged("Note");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Organization {
            get {
                return this.OrganizationField;
            }
            set {
                if ((object.ReferenceEquals(this.OrganizationField, value) != true)) {
                    this.OrganizationField = value;
                    this.RaisePropertyChanged("Organization");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime PublicationDate {
            get {
                return this.PublicationDateField;
            }
            set {
                if ((this.PublicationDateField.Equals(value) != true)) {
                    this.PublicationDateField = value;
                    this.RaisePropertyChanged("PublicationDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string RunwayDirection {
            get {
                return this.RunwayDirectionField;
            }
            set {
                if ((object.ReferenceEquals(this.RunwayDirectionField, value) != true)) {
                    this.RunwayDirectionField = value;
                    this.RaisePropertyChanged("RunwayDirection");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public ChartManagerWeb.ChartServiceReference.ChartType Type {
            get {
                return this.TypeField;
            }
            set {
                if ((this.TypeField.Equals(value) != true)) {
                    this.TypeField = value;
                    this.RaisePropertyChanged("Type");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Version {
            get {
                return this.VersionField;
            }
            set {
                if ((object.ReferenceEquals(this.VersionField, value) != true)) {
                    this.VersionField = value;
                    this.RaisePropertyChanged("Version");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ChartWithReference", Namespace="http://schemas.datacontract.org/2004/07/ChartServices.DataContract")]
    [System.SerializableAttribute()]
    public partial class ChartWithReference : ChartManagerWeb.ChartServiceReference.Chart {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Collections.Generic.List<string> FeatureIdListField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.Generic.List<string> FeatureIdList {
            get {
                return this.FeatureIdListField;
            }
            set {
                if ((object.ReferenceEquals(this.FeatureIdListField, value) != true)) {
                    this.FeatureIdListField = value;
                    this.RaisePropertyChanged("FeatureIdList");
                }
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ChartType", Namespace="http://schemas.datacontract.org/2004/07/ChartServices")]
    public enum ChartType : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        All = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Sid = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Star = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Iac = 3,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Enroute = 4,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Aerodrome = 5,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        A = 6,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Pat = 7,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Area = 8,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        AerodromeElectronicChart = 9,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        AerodromeParkingDockingChart = 10,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        AerodromeGroundMovementChart = 11,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        AerodromeBirdChart = 12,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        AreaMinimumChart = 13,
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ChartUpdateData", Namespace="http://schemas.datacontract.org/2004/07/ChartServices.DataContract")]
    [System.SerializableAttribute()]
    public partial class ChartUpdateData : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime CreatedAtField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private ChartManagerWeb.ChartServiceReference.ChartUser CreatedByField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime EffectiveDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NoteField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime CreatedAt {
            get {
                return this.CreatedAtField;
            }
            set {
                if ((this.CreatedAtField.Equals(value) != true)) {
                    this.CreatedAtField = value;
                    this.RaisePropertyChanged("CreatedAt");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public ChartManagerWeb.ChartServiceReference.ChartUser CreatedBy {
            get {
                return this.CreatedByField;
            }
            set {
                if ((object.ReferenceEquals(this.CreatedByField, value) != true)) {
                    this.CreatedByField = value;
                    this.RaisePropertyChanged("CreatedBy");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime EffectiveDate {
            get {
                return this.EffectiveDateField;
            }
            set {
                if ((this.EffectiveDateField.Equals(value) != true)) {
                    this.EffectiveDateField = value;
                    this.RaisePropertyChanged("EffectiveDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Note {
            get {
                return this.NoteField;
            }
            set {
                if ((object.ReferenceEquals(this.NoteField, value) != true)) {
                    this.NoteField = value;
                    this.RaisePropertyChanged("Note");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ChartCallBackType", Namespace="http://schemas.datacontract.org/2004/07/ChartServices")]
    public enum ChartCallBackType : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Created = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Deleted = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Locked = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Unlocked = 3,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="UserCallbackType", Namespace="http://schemas.datacontract.org/2004/07/ChartServices")]
    public enum UserCallbackType : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        ChangedPassword = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Deleted = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        PrivilegeUp = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        PrivilegeDown = 3,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Disabled = 4,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Enabled = 5,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Updated = 6,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ChartServiceReference.IChartManagerService", CallbackContract=typeof(ChartManagerWeb.ChartServiceReference.IChartManagerServiceCallback), SessionMode=System.ServiceModel.SessionMode.Required)]
    public interface IChartManagerService {
        
        [System.ServiceModel.OperationContractAttribute(ProtectionLevel=System.Net.Security.ProtectionLevel.EncryptAndSign, Action="http://tempuri.org/IChartManagerService/Login", ReplyAction="http://tempuri.org/IChartManagerService/LoginResponse")]
        void Login();
        
        [System.ServiceModel.OperationContractAttribute(ProtectionLevel=System.Net.Security.ProtectionLevel.EncryptAndSign, Action="http://tempuri.org/IChartManagerService/Login", ReplyAction="http://tempuri.org/IChartManagerService/LoginResponse")]
        System.Threading.Tasks.Task LoginAsync();
        
        [System.ServiceModel.OperationContractAttribute(ProtectionLevel=System.Net.Security.ProtectionLevel.EncryptAndSign, Action="http://tempuri.org/IChartManagerService/GetAllUser", ReplyAction="http://tempuri.org/IChartManagerService/GetAllUserResponse")]
        System.Collections.Generic.List<ChartManagerWeb.ChartServiceReference.ChartUser> GetAllUser();
        
        [System.ServiceModel.OperationContractAttribute(ProtectionLevel=System.Net.Security.ProtectionLevel.EncryptAndSign, Action="http://tempuri.org/IChartManagerService/GetAllUser", ReplyAction="http://tempuri.org/IChartManagerService/GetAllUserResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<ChartManagerWeb.ChartServiceReference.ChartUser>> GetAllUserAsync();
        
        [System.ServiceModel.OperationContractAttribute(ProtectionLevel=System.Net.Security.ProtectionLevel.EncryptAndSign, Action="http://tempuri.org/IChartManagerService/GetOrganizations", ReplyAction="http://tempuri.org/IChartManagerService/GetOrganizationsResponse")]
        System.Collections.Generic.List<string> GetOrganizations();
        
        [System.ServiceModel.OperationContractAttribute(ProtectionLevel=System.Net.Security.ProtectionLevel.EncryptAndSign, Action="http://tempuri.org/IChartManagerService/GetOrganizations", ReplyAction="http://tempuri.org/IChartManagerService/GetOrganizationsResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<string>> GetOrganizationsAsync();
        
        [System.ServiceModel.OperationContractAttribute(ProtectionLevel=System.Net.Security.ProtectionLevel.EncryptAndSign, Action="http://tempuri.org/IChartManagerService/GetAerodromes", ReplyAction="http://tempuri.org/IChartManagerService/GetAerodromesResponse")]
        System.Collections.Generic.List<string> GetAerodromes(string organization);
        
        [System.ServiceModel.OperationContractAttribute(ProtectionLevel=System.Net.Security.ProtectionLevel.EncryptAndSign, Action="http://tempuri.org/IChartManagerService/GetAerodromes", ReplyAction="http://tempuri.org/IChartManagerService/GetAerodromesResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<string>> GetAerodromesAsync(string organization);
        
        [System.ServiceModel.OperationContractAttribute(ProtectionLevel=System.Net.Security.ProtectionLevel.EncryptAndSign, Action="http://tempuri.org/IChartManagerService/GetRunways", ReplyAction="http://tempuri.org/IChartManagerService/GetRunwaysResponse")]
        System.Collections.Generic.List<string> GetRunways(string aerodrome);
        
        [System.ServiceModel.OperationContractAttribute(ProtectionLevel=System.Net.Security.ProtectionLevel.EncryptAndSign, Action="http://tempuri.org/IChartManagerService/GetRunways", ReplyAction="http://tempuri.org/IChartManagerService/GetRunwaysResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<string>> GetRunwaysAsync(string aerodrome);
        
        [System.ServiceModel.OperationContractAttribute(ProtectionLevel=System.Net.Security.ProtectionLevel.EncryptAndSign, Action="http://tempuri.org/IChartManagerService/GetUser", ReplyAction="http://tempuri.org/IChartManagerService/GetUserResponse")]
        ChartManagerWeb.ChartServiceReference.ChartUser GetUser(long id);
        
        [System.ServiceModel.OperationContractAttribute(ProtectionLevel=System.Net.Security.ProtectionLevel.EncryptAndSign, Action="http://tempuri.org/IChartManagerService/GetUser", ReplyAction="http://tempuri.org/IChartManagerService/GetUserResponse")]
        System.Threading.Tasks.Task<ChartManagerWeb.ChartServiceReference.ChartUser> GetUserAsync(long id);
        
        [System.ServiceModel.OperationContractAttribute(ProtectionLevel=System.Net.Security.ProtectionLevel.EncryptAndSign, Action="http://tempuri.org/IChartManagerService/TryGetCurrentUser", ReplyAction="http://tempuri.org/IChartManagerService/TryGetCurrentUserResponse")]
        ChartManagerWeb.ChartServiceReference.ChartUser TryGetCurrentUser();
        
        [System.ServiceModel.OperationContractAttribute(ProtectionLevel=System.Net.Security.ProtectionLevel.EncryptAndSign, Action="http://tempuri.org/IChartManagerService/TryGetCurrentUser", ReplyAction="http://tempuri.org/IChartManagerService/TryGetCurrentUserResponse")]
        System.Threading.Tasks.Task<ChartManagerWeb.ChartServiceReference.ChartUser> TryGetCurrentUserAsync();
        
        [System.ServiceModel.OperationContractAttribute(ProtectionLevel=System.Net.Security.ProtectionLevel.EncryptAndSign, Action="http://tempuri.org/IChartManagerService/DeleteUser", ReplyAction="http://tempuri.org/IChartManagerService/DeleteUserResponse")]
        void DeleteUser(long id);
        
        [System.ServiceModel.OperationContractAttribute(ProtectionLevel=System.Net.Security.ProtectionLevel.EncryptAndSign, Action="http://tempuri.org/IChartManagerService/DeleteUser", ReplyAction="http://tempuri.org/IChartManagerService/DeleteUserResponse")]
        System.Threading.Tasks.Task DeleteUserAsync(long id);
        
        [System.ServiceModel.OperationContractAttribute(ProtectionLevel=System.Net.Security.ProtectionLevel.EncryptAndSign, Action="http://tempuri.org/IChartManagerService/CreateUser", ReplyAction="http://tempuri.org/IChartManagerService/CreateUserResponse")]
        void CreateUser(ChartManagerWeb.ChartServiceReference.ChartUser user);
        
        [System.ServiceModel.OperationContractAttribute(ProtectionLevel=System.Net.Security.ProtectionLevel.EncryptAndSign, Action="http://tempuri.org/IChartManagerService/CreateUser", ReplyAction="http://tempuri.org/IChartManagerService/CreateUserResponse")]
        System.Threading.Tasks.Task CreateUserAsync(ChartManagerWeb.ChartServiceReference.ChartUser user);
        
        [System.ServiceModel.OperationContractAttribute(ProtectionLevel=System.Net.Security.ProtectionLevel.EncryptAndSign, Action="http://tempuri.org/IChartManagerService/ExistsUser", ReplyAction="http://tempuri.org/IChartManagerService/ExistsUserResponse")]
        bool ExistsUser(string username, string password);
        
        [System.ServiceModel.OperationContractAttribute(ProtectionLevel=System.Net.Security.ProtectionLevel.EncryptAndSign, Action="http://tempuri.org/IChartManagerService/ExistsUser", ReplyAction="http://tempuri.org/IChartManagerService/ExistsUserResponse")]
        System.Threading.Tasks.Task<bool> ExistsUserAsync(string username, string password);
        
        [System.ServiceModel.OperationContractAttribute(ProtectionLevel=System.Net.Security.ProtectionLevel.EncryptAndSign, Action="http://tempuri.org/IChartManagerService/UpdateUser", ReplyAction="http://tempuri.org/IChartManagerService/UpdateUserResponse")]
        void UpdateUser(ChartManagerWeb.ChartServiceReference.ChartUser user);
        
        [System.ServiceModel.OperationContractAttribute(ProtectionLevel=System.Net.Security.ProtectionLevel.EncryptAndSign, Action="http://tempuri.org/IChartManagerService/UpdateUser", ReplyAction="http://tempuri.org/IChartManagerService/UpdateUserResponse")]
        System.Threading.Tasks.Task UpdateUserAsync(ChartManagerWeb.ChartServiceReference.ChartUser user);
        
        [System.ServiceModel.OperationContractAttribute(ProtectionLevel=System.Net.Security.ProtectionLevel.EncryptAndSign, Action="http://tempuri.org/IChartManagerService/DisableUser", ReplyAction="http://tempuri.org/IChartManagerService/DisableUserResponse")]
        void DisableUser(long id, bool disabled);
        
        [System.ServiceModel.OperationContractAttribute(ProtectionLevel=System.Net.Security.ProtectionLevel.EncryptAndSign, Action="http://tempuri.org/IChartManagerService/DisableUser", ReplyAction="http://tempuri.org/IChartManagerService/DisableUserResponse")]
        System.Threading.Tasks.Task DisableUserAsync(long id, bool disabled);
        
        [System.ServiceModel.OperationContractAttribute(ProtectionLevel=System.Net.Security.ProtectionLevel.EncryptAndSign, Action="http://tempuri.org/IChartManagerService/ChangePassword", ReplyAction="http://tempuri.org/IChartManagerService/ChangePasswordResponse")]
        void ChangePassword(long id, string oldPassword, string newPassword);
        
        [System.ServiceModel.OperationContractAttribute(ProtectionLevel=System.Net.Security.ProtectionLevel.EncryptAndSign, Action="http://tempuri.org/IChartManagerService/ChangePassword", ReplyAction="http://tempuri.org/IChartManagerService/ChangePasswordResponse")]
        System.Threading.Tasks.Task ChangePasswordAsync(long id, string oldPassword, string newPassword);
        
        [System.ServiceModel.OperationContractAttribute(ProtectionLevel=System.Net.Security.ProtectionLevel.EncryptAndSign, Action="http://tempuri.org/IChartManagerService/GetConfigFile", ReplyAction="http://tempuri.org/IChartManagerService/GetConfigFileResponse")]
        byte[] GetConfigFile(long id);
        
        [System.ServiceModel.OperationContractAttribute(ProtectionLevel=System.Net.Security.ProtectionLevel.EncryptAndSign, Action="http://tempuri.org/IChartManagerService/GetConfigFile", ReplyAction="http://tempuri.org/IChartManagerService/GetConfigFileResponse")]
        System.Threading.Tasks.Task<byte[]> GetConfigFileAsync(long id);
        
        [System.ServiceModel.OperationContractAttribute(ProtectionLevel=System.Net.Security.ProtectionLevel.EncryptAndSign, Action="http://tempuri.org/IChartManagerService/Upload", ReplyAction="http://tempuri.org/IChartManagerService/UploadResponse")]
        void Upload(ChartManagerWeb.ChartServiceReference.ChartWithReference chart, byte[] preview, byte[] source);
        
        [System.ServiceModel.OperationContractAttribute(ProtectionLevel=System.Net.Security.ProtectionLevel.EncryptAndSign, Action="http://tempuri.org/IChartManagerService/Upload", ReplyAction="http://tempuri.org/IChartManagerService/UploadResponse")]
        System.Threading.Tasks.Task UploadAsync(ChartManagerWeb.ChartServiceReference.ChartWithReference chart, byte[] preview, byte[] source);
        
        [System.ServiceModel.OperationContractAttribute(ProtectionLevel=System.Net.Security.ProtectionLevel.EncryptAndSign, Action="http://tempuri.org/IChartManagerService/UploadWithUpdate", ReplyAction="http://tempuri.org/IChartManagerService/UploadWithUpdateResponse")]
        void UploadWithUpdate(ChartManagerWeb.ChartServiceReference.ChartWithReference chart, byte[] preview, byte[] source, long updateDataId);
        
        [System.ServiceModel.OperationContractAttribute(ProtectionLevel=System.Net.Security.ProtectionLevel.EncryptAndSign, Action="http://tempuri.org/IChartManagerService/UploadWithUpdate", ReplyAction="http://tempuri.org/IChartManagerService/UploadWithUpdateResponse")]
        System.Threading.Tasks.Task UploadWithUpdateAsync(ChartManagerWeb.ChartServiceReference.ChartWithReference chart, byte[] preview, byte[] source, long updateDataId);
        
        [System.ServiceModel.OperationContractAttribute(ProtectionLevel=System.Net.Security.ProtectionLevel.EncryptAndSign, Action="http://tempuri.org/IChartManagerService/UploadUpdateData", ReplyAction="http://tempuri.org/IChartManagerService/UploadUpdateDataResponse")]
        long UploadUpdateData(ChartManagerWeb.ChartServiceReference.ChartUpdateData metadata, byte[] source, System.Collections.Generic.List<System.Guid> chartIdentifierList);
        
        [System.ServiceModel.OperationContractAttribute(ProtectionLevel=System.Net.Security.ProtectionLevel.EncryptAndSign, Action="http://tempuri.org/IChartManagerService/UploadUpdateData", ReplyAction="http://tempuri.org/IChartManagerService/UploadUpdateDataResponse")]
        System.Threading.Tasks.Task<long> UploadUpdateDataAsync(ChartManagerWeb.ChartServiceReference.ChartUpdateData metadata, byte[] source, System.Collections.Generic.List<System.Guid> chartIdentifierList);
        
        [System.ServiceModel.OperationContractAttribute(ProtectionLevel=System.Net.Security.ProtectionLevel.EncryptAndSign, Action="http://tempuri.org/IChartManagerService/GetLatestChartVersion", ReplyAction="http://tempuri.org/IChartManagerService/GetLatestChartVersionResponse")]
        ChartManagerWeb.ChartServiceReference.Chart GetLatestChartVersion(System.Guid identifier, System.DateTime dateTime);
        
        [System.ServiceModel.OperationContractAttribute(ProtectionLevel=System.Net.Security.ProtectionLevel.EncryptAndSign, Action="http://tempuri.org/IChartManagerService/GetLatestChartVersion", ReplyAction="http://tempuri.org/IChartManagerService/GetLatestChartVersionResponse")]
        System.Threading.Tasks.Task<ChartManagerWeb.ChartServiceReference.Chart> GetLatestChartVersionAsync(System.Guid identifier, System.DateTime dateTime);
        
        [System.ServiceModel.OperationContractAttribute(ProtectionLevel=System.Net.Security.ProtectionLevel.EncryptAndSign, Action="http://tempuri.org/IChartManagerService/GetPreviewOf", ReplyAction="http://tempuri.org/IChartManagerService/GetPreviewOfResponse")]
        byte[] GetPreviewOf(long id);
        
        [System.ServiceModel.OperationContractAttribute(ProtectionLevel=System.Net.Security.ProtectionLevel.EncryptAndSign, Action="http://tempuri.org/IChartManagerService/GetPreviewOf", ReplyAction="http://tempuri.org/IChartManagerService/GetPreviewOfResponse")]
        System.Threading.Tasks.Task<byte[]> GetPreviewOfAsync(long id);
        
        [System.ServiceModel.OperationContractAttribute(ProtectionLevel=System.Net.Security.ProtectionLevel.EncryptAndSign, Action="http://tempuri.org/IChartManagerService/GetSourceOf", ReplyAction="http://tempuri.org/IChartManagerService/GetSourceOfResponse")]
        byte[] GetSourceOf(long id, bool locked);
        
        [System.ServiceModel.OperationContractAttribute(ProtectionLevel=System.Net.Security.ProtectionLevel.EncryptAndSign, Action="http://tempuri.org/IChartManagerService/GetSourceOf", ReplyAction="http://tempuri.org/IChartManagerService/GetSourceOfResponse")]
        System.Threading.Tasks.Task<byte[]> GetSourceOfAsync(long id, bool locked);
        
        [System.ServiceModel.OperationContractAttribute(ProtectionLevel=System.Net.Security.ProtectionLevel.EncryptAndSign, Action="http://tempuri.org/IChartManagerService/GetAllCharts", ReplyAction="http://tempuri.org/IChartManagerService/GetAllChartsResponse")]
        System.Collections.Generic.List<ChartManagerWeb.ChartServiceReference.Chart> GetAllCharts(System.Nullable<ChartManagerWeb.ChartServiceReference.ChartType> type, string name, System.Nullable<long> userId, string organization, string aerodrome, string rwyDir, System.Nullable<bool> locked, System.Nullable<System.DateTime> createdBeginning, System.Nullable<System.DateTime> createdEnding, System.Nullable<System.DateTime> airacDateBeginning, System.Nullable<System.DateTime> airacDateEnding);
        
        [System.ServiceModel.OperationContractAttribute(ProtectionLevel=System.Net.Security.ProtectionLevel.EncryptAndSign, Action="http://tempuri.org/IChartManagerService/GetAllCharts", ReplyAction="http://tempuri.org/IChartManagerService/GetAllChartsResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<ChartManagerWeb.ChartServiceReference.Chart>> GetAllChartsAsync(System.Nullable<ChartManagerWeb.ChartServiceReference.ChartType> type, string name, System.Nullable<long> userId, string organization, string aerodrome, string rwyDir, System.Nullable<bool> locked, System.Nullable<System.DateTime> createdBeginning, System.Nullable<System.DateTime> createdEnding, System.Nullable<System.DateTime> airacDateBeginning, System.Nullable<System.DateTime> airacDateEnding);
        
        [System.ServiceModel.OperationContractAttribute(ProtectionLevel=System.Net.Security.ProtectionLevel.EncryptAndSign, Action="http://tempuri.org/IChartManagerService/GetAffectedCharts", ReplyAction="http://tempuri.org/IChartManagerService/GetAffectedChartsResponse")]
        System.Collections.Generic.List<ChartManagerWeb.ChartServiceReference.Chart> GetAffectedCharts(System.Collections.Generic.List<string> idList, System.DateTime effectiveDate);
        
        [System.ServiceModel.OperationContractAttribute(ProtectionLevel=System.Net.Security.ProtectionLevel.EncryptAndSign, Action="http://tempuri.org/IChartManagerService/GetAffectedCharts", ReplyAction="http://tempuri.org/IChartManagerService/GetAffectedChartsResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<ChartManagerWeb.ChartServiceReference.Chart>> GetAffectedChartsAsync(System.Collections.Generic.List<string> idList, System.DateTime effectiveDate);
        
        [System.ServiceModel.OperationContractAttribute(ProtectionLevel=System.Net.Security.ProtectionLevel.EncryptAndSign, Action="http://tempuri.org/IChartManagerService/GetHistoryOf", ReplyAction="http://tempuri.org/IChartManagerService/GetHistoryOfResponse")]
        System.Collections.Generic.List<ChartManagerWeb.ChartServiceReference.Chart> GetHistoryOf(System.Guid identifier);
        
        [System.ServiceModel.OperationContractAttribute(ProtectionLevel=System.Net.Security.ProtectionLevel.EncryptAndSign, Action="http://tempuri.org/IChartManagerService/GetHistoryOf", ReplyAction="http://tempuri.org/IChartManagerService/GetHistoryOfResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<ChartManagerWeb.ChartServiceReference.Chart>> GetHistoryOfAsync(System.Guid identifier);
        
        [System.ServiceModel.OperationContractAttribute(ProtectionLevel=System.Net.Security.ProtectionLevel.EncryptAndSign, Action="http://tempuri.org/IChartManagerService/GetChart", ReplyAction="http://tempuri.org/IChartManagerService/GetChartResponse")]
        ChartManagerWeb.ChartServiceReference.Chart GetChart(System.Guid identifier, System.DateTime dateTime, int version);
        
        [System.ServiceModel.OperationContractAttribute(ProtectionLevel=System.Net.Security.ProtectionLevel.EncryptAndSign, Action="http://tempuri.org/IChartManagerService/GetChart", ReplyAction="http://tempuri.org/IChartManagerService/GetChartResponse")]
        System.Threading.Tasks.Task<ChartManagerWeb.ChartServiceReference.Chart> GetChartAsync(System.Guid identifier, System.DateTime dateTime, int version);
        
        [System.ServiceModel.OperationContractAttribute(ProtectionLevel=System.Net.Security.ProtectionLevel.EncryptAndSign, Action="http://tempuri.org/IChartManagerService/GetChartById", ReplyAction="http://tempuri.org/IChartManagerService/GetChartByIdResponse")]
        ChartManagerWeb.ChartServiceReference.Chart GetChartById(long id);
        
        [System.ServiceModel.OperationContractAttribute(ProtectionLevel=System.Net.Security.ProtectionLevel.EncryptAndSign, Action="http://tempuri.org/IChartManagerService/GetChartById", ReplyAction="http://tempuri.org/IChartManagerService/GetChartByIdResponse")]
        System.Threading.Tasks.Task<ChartManagerWeb.ChartServiceReference.Chart> GetChartByIdAsync(long id);
        
        [System.ServiceModel.OperationContractAttribute(ProtectionLevel=System.Net.Security.ProtectionLevel.EncryptAndSign, Action="http://tempuri.org/IChartManagerService/LockChart", ReplyAction="http://tempuri.org/IChartManagerService/LockChartResponse")]
        void LockChart(long id, bool locked);
        
        [System.ServiceModel.OperationContractAttribute(ProtectionLevel=System.Net.Security.ProtectionLevel.EncryptAndSign, Action="http://tempuri.org/IChartManagerService/LockChart", ReplyAction="http://tempuri.org/IChartManagerService/LockChartResponse")]
        System.Threading.Tasks.Task LockChartAsync(long id, bool locked);
        
        [System.ServiceModel.OperationContractAttribute(ProtectionLevel=System.Net.Security.ProtectionLevel.EncryptAndSign, Action="http://tempuri.org/IChartManagerService/DeleteAllChartVersions", ReplyAction="http://tempuri.org/IChartManagerService/DeleteAllChartVersionsResponse")]
        void DeleteAllChartVersions(System.Guid identifier);
        
        [System.ServiceModel.OperationContractAttribute(ProtectionLevel=System.Net.Security.ProtectionLevel.EncryptAndSign, Action="http://tempuri.org/IChartManagerService/DeleteAllChartVersions", ReplyAction="http://tempuri.org/IChartManagerService/DeleteAllChartVersionsResponse")]
        System.Threading.Tasks.Task DeleteAllChartVersionsAsync(System.Guid identifier);
        
        [System.ServiceModel.OperationContractAttribute(ProtectionLevel=System.Net.Security.ProtectionLevel.EncryptAndSign, Action="http://tempuri.org/IChartManagerService/DeleteChartById", ReplyAction="http://tempuri.org/IChartManagerService/DeleteChartByIdResponse")]
        void DeleteChartById(long id);
        
        [System.ServiceModel.OperationContractAttribute(ProtectionLevel=System.Net.Security.ProtectionLevel.EncryptAndSign, Action="http://tempuri.org/IChartManagerService/DeleteChartById", ReplyAction="http://tempuri.org/IChartManagerService/DeleteChartByIdResponse")]
        System.Threading.Tasks.Task DeleteChartByIdAsync(long id);
        
        [System.ServiceModel.OperationContractAttribute(ProtectionLevel=System.Net.Security.ProtectionLevel.EncryptAndSign, Action="http://tempuri.org/IChartManagerService/DeleteChartByEffectiveDate", ReplyAction="http://tempuri.org/IChartManagerService/DeleteChartByEffectiveDateResponse")]
        void DeleteChartByEffectiveDate(System.Guid id, System.DateTime dateTime);
        
        [System.ServiceModel.OperationContractAttribute(ProtectionLevel=System.Net.Security.ProtectionLevel.EncryptAndSign, Action="http://tempuri.org/IChartManagerService/DeleteChartByEffectiveDate", ReplyAction="http://tempuri.org/IChartManagerService/DeleteChartByEffectiveDateResponse")]
        System.Threading.Tasks.Task DeleteChartByEffectiveDateAsync(System.Guid id, System.DateTime dateTime);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IChartManagerServiceCallback {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, ProtectionLevel=System.Net.Security.ProtectionLevel.EncryptAndSign, Action="http://tempuri.org/IChartManagerService/ChartChanged")]
        void ChartChanged(ChartManagerWeb.ChartServiceReference.Chart chart, ChartManagerWeb.ChartServiceReference.ChartCallBackType type);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, ProtectionLevel=System.Net.Security.ProtectionLevel.EncryptAndSign, Action="http://tempuri.org/IChartManagerService/AllChartVersionsDeleted")]
        void AllChartVersionsDeleted(System.Guid identifier);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, ProtectionLevel=System.Net.Security.ProtectionLevel.EncryptAndSign, Action="http://tempuri.org/IChartManagerService/ChartsByEffectiveDateDeleted")]
        void ChartsByEffectiveDateDeleted(System.Guid identifier, System.DateTime dateTime);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, ProtectionLevel=System.Net.Security.ProtectionLevel.EncryptAndSign, Action="http://tempuri.org/IChartManagerService/UserChanged")]
        void UserChanged(ChartManagerWeb.ChartServiceReference.UserCallbackType type);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IChartManagerServiceChannel : ChartManagerWeb.ChartServiceReference.IChartManagerService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ChartManagerServiceClient : System.ServiceModel.DuplexClientBase<ChartManagerWeb.ChartServiceReference.IChartManagerService>, ChartManagerWeb.ChartServiceReference.IChartManagerService {
        
        public ChartManagerServiceClient(System.ServiceModel.InstanceContext callbackInstance) : 
                base(callbackInstance) {
        }
        
        public ChartManagerServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName) : 
                base(callbackInstance, endpointConfigurationName) {
        }
        
        public ChartManagerServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, string remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public ChartManagerServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public ChartManagerServiceClient(System.ServiceModel.InstanceContext callbackInstance, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, binding, remoteAddress) {
        }
        
        public void Login() {
            base.Channel.Login();
        }
        
        public System.Threading.Tasks.Task LoginAsync() {
            return base.Channel.LoginAsync();
        }
        
        public System.Collections.Generic.List<ChartManagerWeb.ChartServiceReference.ChartUser> GetAllUser() {
            return base.Channel.GetAllUser();
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<ChartManagerWeb.ChartServiceReference.ChartUser>> GetAllUserAsync() {
            return base.Channel.GetAllUserAsync();
        }
        
        public System.Collections.Generic.List<string> GetOrganizations() {
            return base.Channel.GetOrganizations();
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<string>> GetOrganizationsAsync() {
            return base.Channel.GetOrganizationsAsync();
        }
        
        public System.Collections.Generic.List<string> GetAerodromes(string organization) {
            return base.Channel.GetAerodromes(organization);
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<string>> GetAerodromesAsync(string organization) {
            return base.Channel.GetAerodromesAsync(organization);
        }
        
        public System.Collections.Generic.List<string> GetRunways(string aerodrome) {
            return base.Channel.GetRunways(aerodrome);
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<string>> GetRunwaysAsync(string aerodrome) {
            return base.Channel.GetRunwaysAsync(aerodrome);
        }
        
        public ChartManagerWeb.ChartServiceReference.ChartUser GetUser(long id) {
            return base.Channel.GetUser(id);
        }
        
        public System.Threading.Tasks.Task<ChartManagerWeb.ChartServiceReference.ChartUser> GetUserAsync(long id) {
            return base.Channel.GetUserAsync(id);
        }
        
        public ChartManagerWeb.ChartServiceReference.ChartUser TryGetCurrentUser() {
            return base.Channel.TryGetCurrentUser();
        }
        
        public System.Threading.Tasks.Task<ChartManagerWeb.ChartServiceReference.ChartUser> TryGetCurrentUserAsync() {
            return base.Channel.TryGetCurrentUserAsync();
        }
        
        public void DeleteUser(long id) {
            base.Channel.DeleteUser(id);
        }
        
        public System.Threading.Tasks.Task DeleteUserAsync(long id) {
            return base.Channel.DeleteUserAsync(id);
        }
        
        public void CreateUser(ChartManagerWeb.ChartServiceReference.ChartUser user) {
            base.Channel.CreateUser(user);
        }
        
        public System.Threading.Tasks.Task CreateUserAsync(ChartManagerWeb.ChartServiceReference.ChartUser user) {
            return base.Channel.CreateUserAsync(user);
        }
        
        public bool ExistsUser(string username, string password) {
            return base.Channel.ExistsUser(username, password);
        }
        
        public System.Threading.Tasks.Task<bool> ExistsUserAsync(string username, string password) {
            return base.Channel.ExistsUserAsync(username, password);
        }
        
        public void UpdateUser(ChartManagerWeb.ChartServiceReference.ChartUser user) {
            base.Channel.UpdateUser(user);
        }
        
        public System.Threading.Tasks.Task UpdateUserAsync(ChartManagerWeb.ChartServiceReference.ChartUser user) {
            return base.Channel.UpdateUserAsync(user);
        }
        
        public void DisableUser(long id, bool disabled) {
            base.Channel.DisableUser(id, disabled);
        }
        
        public System.Threading.Tasks.Task DisableUserAsync(long id, bool disabled) {
            return base.Channel.DisableUserAsync(id, disabled);
        }
        
        public void ChangePassword(long id, string oldPassword, string newPassword) {
            base.Channel.ChangePassword(id, oldPassword, newPassword);
        }
        
        public System.Threading.Tasks.Task ChangePasswordAsync(long id, string oldPassword, string newPassword) {
            return base.Channel.ChangePasswordAsync(id, oldPassword, newPassword);
        }
        
        public byte[] GetConfigFile(long id) {
            return base.Channel.GetConfigFile(id);
        }
        
        public System.Threading.Tasks.Task<byte[]> GetConfigFileAsync(long id) {
            return base.Channel.GetConfigFileAsync(id);
        }
        
        public void Upload(ChartManagerWeb.ChartServiceReference.ChartWithReference chart, byte[] preview, byte[] source) {
            base.Channel.Upload(chart, preview, source);
        }
        
        public System.Threading.Tasks.Task UploadAsync(ChartManagerWeb.ChartServiceReference.ChartWithReference chart, byte[] preview, byte[] source) {
            return base.Channel.UploadAsync(chart, preview, source);
        }
        
        public void UploadWithUpdate(ChartManagerWeb.ChartServiceReference.ChartWithReference chart, byte[] preview, byte[] source, long updateDataId) {
            base.Channel.UploadWithUpdate(chart, preview, source, updateDataId);
        }
        
        public System.Threading.Tasks.Task UploadWithUpdateAsync(ChartManagerWeb.ChartServiceReference.ChartWithReference chart, byte[] preview, byte[] source, long updateDataId) {
            return base.Channel.UploadWithUpdateAsync(chart, preview, source, updateDataId);
        }
        
        public long UploadUpdateData(ChartManagerWeb.ChartServiceReference.ChartUpdateData metadata, byte[] source, System.Collections.Generic.List<System.Guid> chartIdentifierList) {
            return base.Channel.UploadUpdateData(metadata, source, chartIdentifierList);
        }
        
        public System.Threading.Tasks.Task<long> UploadUpdateDataAsync(ChartManagerWeb.ChartServiceReference.ChartUpdateData metadata, byte[] source, System.Collections.Generic.List<System.Guid> chartIdentifierList) {
            return base.Channel.UploadUpdateDataAsync(metadata, source, chartIdentifierList);
        }
        
        public ChartManagerWeb.ChartServiceReference.Chart GetLatestChartVersion(System.Guid identifier, System.DateTime dateTime) {
            return base.Channel.GetLatestChartVersion(identifier, dateTime);
        }
        
        public System.Threading.Tasks.Task<ChartManagerWeb.ChartServiceReference.Chart> GetLatestChartVersionAsync(System.Guid identifier, System.DateTime dateTime) {
            return base.Channel.GetLatestChartVersionAsync(identifier, dateTime);
        }
        
        public byte[] GetPreviewOf(long id) {
            return base.Channel.GetPreviewOf(id);
        }
        
        public System.Threading.Tasks.Task<byte[]> GetPreviewOfAsync(long id) {
            return base.Channel.GetPreviewOfAsync(id);
        }
        
        public byte[] GetSourceOf(long id, bool locked) {
            return base.Channel.GetSourceOf(id, locked);
        }
        
        public System.Threading.Tasks.Task<byte[]> GetSourceOfAsync(long id, bool locked) {
            return base.Channel.GetSourceOfAsync(id, locked);
        }
        
        public System.Collections.Generic.List<ChartManagerWeb.ChartServiceReference.Chart> GetAllCharts(System.Nullable<ChartManagerWeb.ChartServiceReference.ChartType> type, string name, System.Nullable<long> userId, string organization, string aerodrome, string rwyDir, System.Nullable<bool> locked, System.Nullable<System.DateTime> createdBeginning, System.Nullable<System.DateTime> createdEnding, System.Nullable<System.DateTime> airacDateBeginning, System.Nullable<System.DateTime> airacDateEnding) {
            return base.Channel.GetAllCharts(type, name, userId, organization, aerodrome, rwyDir, locked, createdBeginning, createdEnding, airacDateBeginning, airacDateEnding);
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<ChartManagerWeb.ChartServiceReference.Chart>> GetAllChartsAsync(System.Nullable<ChartManagerWeb.ChartServiceReference.ChartType> type, string name, System.Nullable<long> userId, string organization, string aerodrome, string rwyDir, System.Nullable<bool> locked, System.Nullable<System.DateTime> createdBeginning, System.Nullable<System.DateTime> createdEnding, System.Nullable<System.DateTime> airacDateBeginning, System.Nullable<System.DateTime> airacDateEnding) {
            return base.Channel.GetAllChartsAsync(type, name, userId, organization, aerodrome, rwyDir, locked, createdBeginning, createdEnding, airacDateBeginning, airacDateEnding);
        }
        
        public System.Collections.Generic.List<ChartManagerWeb.ChartServiceReference.Chart> GetAffectedCharts(System.Collections.Generic.List<string> idList, System.DateTime effectiveDate) {
            return base.Channel.GetAffectedCharts(idList, effectiveDate);
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<ChartManagerWeb.ChartServiceReference.Chart>> GetAffectedChartsAsync(System.Collections.Generic.List<string> idList, System.DateTime effectiveDate) {
            return base.Channel.GetAffectedChartsAsync(idList, effectiveDate);
        }
        
        public System.Collections.Generic.List<ChartManagerWeb.ChartServiceReference.Chart> GetHistoryOf(System.Guid identifier) {
            return base.Channel.GetHistoryOf(identifier);
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<ChartManagerWeb.ChartServiceReference.Chart>> GetHistoryOfAsync(System.Guid identifier) {
            return base.Channel.GetHistoryOfAsync(identifier);
        }
        
        public ChartManagerWeb.ChartServiceReference.Chart GetChart(System.Guid identifier, System.DateTime dateTime, int version) {
            return base.Channel.GetChart(identifier, dateTime, version);
        }
        
        public System.Threading.Tasks.Task<ChartManagerWeb.ChartServiceReference.Chart> GetChartAsync(System.Guid identifier, System.DateTime dateTime, int version) {
            return base.Channel.GetChartAsync(identifier, dateTime, version);
        }
        
        public ChartManagerWeb.ChartServiceReference.Chart GetChartById(long id) {
            return base.Channel.GetChartById(id);
        }
        
        public System.Threading.Tasks.Task<ChartManagerWeb.ChartServiceReference.Chart> GetChartByIdAsync(long id) {
            return base.Channel.GetChartByIdAsync(id);
        }
        
        public void LockChart(long id, bool locked) {
            base.Channel.LockChart(id, locked);
        }
        
        public System.Threading.Tasks.Task LockChartAsync(long id, bool locked) {
            return base.Channel.LockChartAsync(id, locked);
        }
        
        public void DeleteAllChartVersions(System.Guid identifier) {
            base.Channel.DeleteAllChartVersions(identifier);
        }
        
        public System.Threading.Tasks.Task DeleteAllChartVersionsAsync(System.Guid identifier) {
            return base.Channel.DeleteAllChartVersionsAsync(identifier);
        }
        
        public void DeleteChartById(long id) {
            base.Channel.DeleteChartById(id);
        }
        
        public System.Threading.Tasks.Task DeleteChartByIdAsync(long id) {
            return base.Channel.DeleteChartByIdAsync(id);
        }
        
        public void DeleteChartByEffectiveDate(System.Guid id, System.DateTime dateTime) {
            base.Channel.DeleteChartByEffectiveDate(id, dateTime);
        }
        
        public System.Threading.Tasks.Task DeleteChartByEffectiveDateAsync(System.Guid id, System.DateTime dateTime) {
            return base.Channel.DeleteChartByEffectiveDateAsync(id, dateTime);
        }
    }
}
