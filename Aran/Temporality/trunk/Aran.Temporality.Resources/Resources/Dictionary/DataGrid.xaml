<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">

    <Style TargetType="TreeView" x:Key="AllwaysSelectedTreeView">
        <Style.Resources>
            <SolidColorBrush x:Key="{x:Static SystemColors.HighlightBrushKey}" Color="SkyBlue"/>
            <SolidColorBrush x:Key="{x:Static SystemColors.HighlightTextBrushKey}" Color="Black"/>
            
            <SolidColorBrush x:Key="{x:Static SystemColors.ControlBrushKey}" Color="SkyBlue"/>
            <SolidColorBrush x:Key="{x:Static SystemColors.ControlTextBrushKey}" Color="Black"/>
            <!--SolidColorBrush x:Key="{x:Static SystemColors.InactiveSelectionHighlightBrushKey}" Color="{x:Static SystemColors.HighlightColor}"/-->
        </Style.Resources>

        <!--<Style.Triggers>
            <DataTrigger Binding="{Binding IsLoading}" Value="True">
                <Setter Property="ListView.Cursor" Value="Wait"/>
                <Setter Property="ListView.Background" Value="LightGray"/>
            </DataTrigger>
        </Style.Triggers>-->
    </Style>

    <Style TargetType="DataGridRow" x:Key="AllwaysSelectedDataGrid">
        <Style.Resources>
            <SolidColorBrush x:Key="{x:Static SystemColors.HighlightBrushKey}" Color="SkyBlue"/>
            <SolidColorBrush x:Key="{x:Static SystemColors.HighlightTextBrushKey}" Color="Black"/>

            <SolidColorBrush x:Key="{x:Static SystemColors.ControlBrushKey}" Color="SkyBlue"/>
            <SolidColorBrush x:Key="{x:Static SystemColors.ControlTextBrushKey}" Color="Black"/>
            <!--SolidColorBrush x:Key="{x:Static SystemColors.InactiveSelectionHighlightBrushKey}" Color="{x:Static SystemColors.HighlightColor}"/-->
        </Style.Resources>

        <!--<Style.Triggers>
            <DataTrigger Binding="{Binding IsLoading}" Value="True">
                <Setter Property="ListView.Cursor" Value="Wait"/>
                <Setter Property="ListView.Background" Value="LightGray"/>
            </DataTrigger>
        </Style.Triggers>-->
    </Style>

    <Style TargetType="{x:Type GroupItem}" x:Key="EditorDataGridGroupStyle">
        <Setter Property="Margin" Value="0,0,0,5"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type GroupItem}">
                    <Expander IsExpanded="{Binding Path=Items[0].IsExpanded, FallbackValue=True}" BorderBrush="SteelBlue" BorderThickness="0,0,0,1">
                        <Expander.Header>
                            <Grid>
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition Width="*"/>
                                    <ColumnDefinition Width="Auto"/>
                                </Grid.ColumnDefinitions>

                                <TextBlock Grid.Column="0" Text="{Binding Path=Name}" MinWidth="100">
                                    <TextBlock.Style>
                                        <Style TargetType="{x:Type TextBlock}">
                                            <Setter Property="FontWeight" Value="Bold"/>
                                            <Setter Property="Margin" Value="5,0,0,0"/>
                                            <Setter Property="Foreground" Value="SteelBlue"/>
                                        </Style>
                                    </TextBlock.Style>
                                </TextBlock>

                                <!--<CheckBox Grid.Column="1"  Content="With Missed"/>-->


                            </Grid>
                        </Expander.Header>
                        <Expander.Content>
                            <ItemsPresenter />
                        </Expander.Content>
                        
                        
                    </Expander>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="{x:Type GroupItem}" x:Key="EditorDataGridGroupStyle2">
        <Setter Property="Margin" Value="0,0,0,5"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type GroupItem}">
                    <Expander IsExpanded="True" BorderBrush="SteelBlue" BorderThickness="0,0,0,1">
                        <Expander.Header>
                            <TextBlock Text="{Binding Path=Name}" MinWidth="100">
                                <TextBlock.Style>
                                    <Style TargetType="{x:Type TextBlock}">
                                        <Setter Property="FontWeight" Value="Bold"/>
                                        <Setter Property="Margin" Value="5,0,0,0"/>
                                        <Setter Property="Foreground" Value="SteelBlue"/>
                                        
                                        <Style.Triggers>
                                            <DataTrigger Value="True">
                                                <DataTrigger.Binding>
                                                    <Binding RelativeSource="{RelativeSource TemplatedParent}" Path="Content.IsBottomLevel"/>
                                                </DataTrigger.Binding>
                                                
                                                <Setter Property="FontWeight" Value="Normal"/>
                                                <Setter Property="Margin" Value="15,0,0,0"/>
                                                <Setter Property="Foreground" Value="SteelBlue"/>
                                            </DataTrigger>
                                        </Style.Triggers>
                                    </Style>
                                </TextBlock.Style>
                            </TextBlock>
                        </Expander.Header>
                        <Expander.Content>
                            <ItemsPresenter />
                        </Expander.Content>


                    </Expander>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
</ResourceDictionary>